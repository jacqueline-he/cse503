{"input_index": 0, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to remove first and last occurrence of a given character from the string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 0, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to remove first and last occurrence of a given character from the string. Here is is the method signature=def remove_Occ(s,ch):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 1, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 1, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a given matrix in ascending order according to the sum of its rows. Here is is the method signature=def sort_matrix(M):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 2, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count the most common words in a dictionary.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 2, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count the most common words in a dictionary. Here is is the method signature=from collections import Counter\r\ndef count_common(words):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 3, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the volume of a triangular prism.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 3, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the volume of a triangular prism. Here is is the method signature=def find_Volume(l,b,h) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 4, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to split a string at lowercase letters.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 4, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to split a string at lowercase letters. Here is is the method signature=import re\r\ndef split_lowerstring(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 5, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find sequences of lowercase letters joined with an underscore.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 5, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find sequences of lowercase letters joined with an underscore. Here is is the method signature=import re\r\ndef text_lowercase_underscore(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 6, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the perimeter of a square.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 6, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the perimeter of a square. Here is is the method signature=def square_perimeter(a):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 7, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove characters from the first string which are present in the second string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 7, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove characters from the first string which are present in the second string. Here is is the method signature=NO_OF_CHARS = 256\r\ndef str_to_list(string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 8, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find whether a given array of integers contains any duplicate element.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 8, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find whether a given array of integers contains any duplicate element. Here is is the method signature=def test_duplicate(arraynums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 9, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if the given number is woodball or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 9, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if the given number is woodball or not. Here is is the method signature=def is_woodall(x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 10, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find m number of multiples of n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 10, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find m number of multiples of n. Here is is the method signature=def multiples_of_num(m,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 11, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the first duplicate element in a given array of integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 11, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the first duplicate element in a given array of integers. Here is is the method signature=def find_first_duplicate(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 12, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the maximum sum of elements of list in a list of lists.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 12, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the maximum sum of elements of list in a list of lists. Here is is the method signature=def maximum_Sum(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 13, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert the given binary number to its decimal equivalent.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 13, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert the given binary number to its decimal equivalent. Here is is the method signature=def binary_to_decimal(binary):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 14, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the product of non-repeated elements in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 14, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the product of non-repeated elements in a given array. Here is is the method signature=def find_Product(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 15, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if the given tuple list has all k elements.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 15, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if the given tuple list has all k elements. Here is is the method signature=def check_k_elements(test_list, K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 16, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to remove all digits from a list of strings.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 16, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to remove all digits from a list of strings. Here is is the method signature=import re  \r\ndef remove(list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 17, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find binomial co-efficient.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 17, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find binomial co-efficient. Here is is the method signature=def binomial_Coeff(n,k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 18, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the element occurring odd number of times.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 18, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the element occurring odd number of times. Here is is the method signature=def get_Odd_Occurrence(arr,arr_size):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 19, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count all the substrings starting and ending with same characters.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 19, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count all the substrings starting and ending with same characters. Here is is the method signature=def check_Equality(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 20, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 20, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm. Here is is the method signature=def func(nums, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 21, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the largest prime factor of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 21, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the largest prime factor of a given number. Here is is the method signature=import math \r\ndef max_Prime_Factors (n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 22, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to convert a decimal number to binary number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 22, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to convert a decimal number to binary number. Here is is the method signature=def decimal_To_Binary(N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 23, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the missing number in a sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 23, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the missing number in a sorted array. Here is is the method signature=def find_missing(ar,N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 24, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the n-th rectangular number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 24, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the n-th rectangular number. Here is is the method signature=def find_rect_num(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 25, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 25, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the nth digit in the proper fraction of two given numbers. Here is is the method signature=def find_Nth_Digit(p,q,N) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 26, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a given mixed list of integers and strings.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 26, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a given mixed list of integers and strings. Here is is the method signature=def sort_mixed_list(mixed_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 27, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the division of first even and odd number of a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 27, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the division of first even and odd number of a given list. Here is is the method signature=def div_even_odd(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 28, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 28, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different. Here is is the method signature=import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 29, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find frequency of the elements in a given list of lists using collections module.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 29, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find frequency of the elements in a given list of lists using collections module. Here is is the method signature=from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 30, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to filter even numbers using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 30, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to filter even numbers using lambda function. Here is is the method signature=def filter_evennumbers(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 31, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of repeated elements in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 31, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of repeated elements in a given array. Here is is the method signature=def find_Sum(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 32, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 32, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find sequences of lowercase letters joined with an underscore using regex. Here is is the method signature=import re\r\ndef text_match(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 33, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that matches a word at the beginning of a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 33, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that matches a word at the beginning of a string. Here is is the method signature=import re\r\ndef text_match_string(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 34, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the gcd of the given array elements.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 34, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the gcd of the given array elements. Here is is the method signature=def find_gcd(x, y):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 35, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to determine whether all the numbers are different from each other are not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 35, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to determine whether all the numbers are different from each other are not. Here is is the method signature=def test_distinct(data):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 36, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the last digit when factorial of a divides factorial of b.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 36, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the last digit when factorial of a divides factorial of b. Here is is the method signature=def compute_Last_Digit(A,B):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 37, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to set all odd bits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 37, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to set all odd bits of a given number. Here is is the method signature=def odd_bit_set_number(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 38, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract every first or specified element from a given two-dimensional list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 38, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract every first or specified element from a given two-dimensional list. Here is is the method signature=def specified_element(nums, N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 39, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the list with minimum length using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 39, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the list with minimum length using lambda function. Here is is the method signature=def min_length_list(input_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 40, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to print check if the triangle is equilateral or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 40, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to print check if the triangle is equilateral or not. Here is is the method signature=def check_equilateral(x,y,z):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 41, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to caluclate area of a parallelogram.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 41, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to caluclate area of a parallelogram. Here is is the method signature=def parallelogram_area(b,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 42, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the first and last characters of a given string are equal or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 42, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the first and last characters of a given string are equal or not. Here is is the method signature=def check_Equality(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 43, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort the given array by using counting sort.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 43, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort the given array by using counting sort. Here is is the method signature=def counting_sort(my_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 44, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find t-nth term of geometric series.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 44, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find t-nth term of geometric series. Here is is the method signature=import math\r\ndef tn_gp(a,n,r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 45, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check if a given number is one less than twice its reverse.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 45, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check if a given number is one less than twice its reverse. Here is is the method signature=def rev(num):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 46, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the largest number that can be formed with the given digits.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 46, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the largest number that can be formed with the given digits. Here is is the method signature=def find_Max_Num(arr,n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 47, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given two integers have opposite sign or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 47, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given two integers have opposite sign or not. Here is is the method signature=def opposite_Signs(x,y):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 48, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the nth octagonal number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 48, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the nth octagonal number. Here is is the method signature=def is_octagonal(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 49, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 49, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array. Here is is the method signature=def max_len_sub( arr, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 50, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count number of substrings with the sum of digits equal to their length.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 50, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count number of substrings with the sum of digits equal to their length. Here is is the method signature=from collections import defaultdict\r\ndef count_Substrings(s,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 51, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find smallest number in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 51, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find smallest number in a list. Here is is the method signature=def smallest_num(xs):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 52, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum difference between available pairs in the given tuple list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 52, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum difference between available pairs in the given tuple list. Here is is the method signature=def max_difference(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 53, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a list of tuples using lambda.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 53, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a list of tuples using lambda. Here is is the method signature=def subject_marks(subjectmarks):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 54, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function of recursion list sum.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 54, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function of recursion list sum. Here is is the method signature=def recursive_list_sum(data_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 55, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count positive numbers in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 55, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count positive numbers in a list. Here is is the method signature=def pos_count(list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 56, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the number of ways to partition a set of bell numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 56, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the number of ways to partition a set of bell numbers. Here is is the method signature=def bell_number(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 57, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given array is monotonic or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 57, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given array is monotonic or not. Here is is the method signature=def is_Monotonic(A):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 58, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether a list contains the given sublist or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 58, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether a list contains the given sublist or not. Here is is the method signature=def is_sublist(l, s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 59, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find whether all the given tuples have equal length or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 59, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find whether all the given tuples have equal length or not. Here is is the method signature=def find_equal_tuple(Input, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 60, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a list of elements using comb sort.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 60, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a list of elements using comb sort. Here is is the method signature=def comb_sort(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 61, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 61, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given number can be represented as difference of two squares or not. Here is is the method signature=def dif_Square(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 62, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to split the given string with multiple delimiters by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 62, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to split the given string with multiple delimiters by using regex. Here is is the method signature=import re\r\ndef multiple_split(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 63, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether it follows the sequence given in the patterns array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 63, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether it follows the sequence given in the patterns array. Here is is the method signature=def is_samepatterns(colors, patterns):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 64, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 64, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find tuples which have all elements divisible by k from the given list of tuples. Here is is the method signature=def find_tuples(test_list, K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 65, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of squares in a rectangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 65, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of squares in a rectangle. Here is is the method signature=def count_Squares(m,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 66, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the difference between sum of even and odd digits.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 66, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the difference between sum of even and odd digits. Here is is the method signature=def is_Diff(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 67, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find number of integers with odd number of set bits.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 67, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find number of integers with odd number of set bits. Here is is the method signature=def count_With_Odd_SetBits(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 68, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the length of the word is odd or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 68, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the length of the word is odd or not. Here is is the method signature=def word_len(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 69, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the nth tetrahedral number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 69, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the nth tetrahedral number. Here is is the method signature=def tetrahedral_number(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 70, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to zip the two given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 70, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to zip the two given tuples. Here is is the method signature=def zip_tuples(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 71, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the volume of a sphere.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 71, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the volume of a sphere. Here is is the method signature=import math\r\ndef volume_sphere(r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 72, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the character made by adding all the characters of the given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 72, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the character made by adding all the characters of the given string. Here is is the method signature=def get_Char(strr):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 73, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the n-th number in newman conway sequence.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 73, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the n-th number in newman conway sequence. Here is is the method signature=def sequence(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 74, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the surface area of a sphere.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 74, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the surface area of a sphere. Here is is the method signature=import math\r\ndef surfacearea_sphere(r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 75, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find nth centered hexagonal number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 75, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find nth centered hexagonal number. Here is is the method signature=def centered_hexagonal_number(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 76, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to merge three dictionaries into a single expression.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 76, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to merge three dictionaries into a single expression. Here is is the method signature=import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 77, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to get the frequency of the elements in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 77, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to get the frequency of the elements in a list. Here is is the method signature=import collections\r\ndef freq_count(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 78, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the closest smaller number than n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 78, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the closest smaller number than n. Here is is the method signature=def closest_num(N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 79, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the length of the longest word.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 79, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the length of the longest word. Here is is the method signature=def len_log(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 80, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if a substring is present in a given list of string values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 80, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if a substring is present in a given list of string values. Here is is the method signature=def find_substring(str1, sub_str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 81, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether the given number is undulating or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 81, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether the given number is undulating or not. Here is is the method signature=def is_undulating(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 82, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the value of 'a' to the power 'b'.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 82, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the value of 'a' to the power 'b'. Here is is the method signature=def power(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 83, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract the index minimum value record from the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 83, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract the index minimum value record from the given tuples. Here is is the method signature=from operator import itemgetter \r\ndef index_minimum(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 84, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the minimum length of sublist.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 84, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the minimum length of sublist. Here is is the method signature=def Find_Min_Length(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 85, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the number of divisors of a given integer.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 85, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the number of divisors of a given integer. Here is is the method signature=def divisor(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 86, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find frequency count of list of lists.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 86, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find frequency count of list of lists. Here is is the method signature=def frequency_lists(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 87, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 87, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to multiply all the numbers in a list and divide with the length of the list. Here is is the method signature=def multiply_num(numbers):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 88, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert the given decimal number to its binary equivalent.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 88, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert the given decimal number to its binary equivalent. Here is is the method signature=def decimal_to_binary(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 89, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the next smallest palindrome of a specified number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 89, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the next smallest palindrome of a specified number. Here is is the method signature=import sys\r\ndef next_smallest_palindrome(num):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 90, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the kth element in the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 90, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the kth element in the given array. Here is is the method signature=def kth_element(arr, n, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 91, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert snake case string to camel case string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 91, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert snake case string to camel case string. Here is is the method signature=def snake_to_camel(word):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 92, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find eulerian number a(n, m).", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 92, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find eulerian number a(n, m). Here is is the method signature=def eulerian_num(n, m):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 93, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 93, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort each sublist of strings in a given list of lists using lambda function. Here is is the method signature=def sort_sublists(input_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 94, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count true booleans in the given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 94, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count true booleans in the given list. Here is is the method signature=def count(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 95, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to add the given list to the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 95, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to add the given list to the given tuples. Here is is the method signature=def add_lists(test_list, test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 96, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count hexadecimal numbers for a given range.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 96, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count hexadecimal numbers for a given range. Here is is the method signature=def count_Hexadecimal(L,R) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 97, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 97, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm. Here is is the method signature=import heapq\r\ndef merge_sorted_list(num1,num2,num3):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 98, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the count of rotations of a binary string with odd value.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 98, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the count of rotations of a binary string with odd value. Here is is the method signature=def odd_Equivalent(s,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 99, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 99, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract the ranges that are missing from the given list with the given start range and end range values. Here is is the method signature=def extract_missing(test_list, strt_val, stop_val):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 100, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 100, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find common elements in given nested lists. * list item * list item * list item * list item Here is is the method signature=def common_in_nested_lists(nestedlist):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 101, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the perimeter of a cylinder.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 101, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the perimeter of a cylinder. Here is is the method signature=def perimeter(diameter,height) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 102, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if a string represents an integer or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 102, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if a string represents an integer or not. Here is is the method signature=def check_integer(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 103, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to assign frequency to each tuple in the given tuple list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 103, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to assign frequency to each tuple in the given tuple list. Here is is the method signature=from collections import Counter \r\ndef assign_freq(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 104, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether all dictionaries in a list are empty or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 104, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether all dictionaries in a list are empty or not. Here is is the method signature=def empty_dit(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 105, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert a given tuple of positive integers into an integer.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 105, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert a given tuple of positive integers into an integer. Here is is the method signature=def tuple_to_int(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 106, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert all possible convertible elements in the list to float.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 106, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert all possible convertible elements in the list to float. Here is is the method signature=def list_to_float(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 107, "assigned_model": "model", "assigned_process": 0, "context_string": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 107, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list. Here is is the method signature=def string_to_list(string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 108, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the element that appears only once in a sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 108, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the element that appears only once in a sorted array. Here is is the method signature=def search(arr,n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 109, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum product from the pairs of tuples within a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 109, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum product from the pairs of tuples within a given list. Here is is the method signature=def max_product_tuple(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 110, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the triplet with sum of the given array", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 110, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the triplet with sum of the given array Here is is the method signature=def check_triplet(A, n, sum, count):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 111, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find n\u2019th smart number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 111, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find n\u2019th smart number. Here is is the method signature=MAX = 3000 \r\ndef smartNumber(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 112, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sum all amicable numbers from 1 to a specified number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 112, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sum all amicable numbers from 1 to a specified number. Here is is the method signature=def amicable_numbers_sum(limit):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 113, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to get the angle of a complex number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 113, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to get the angle of a complex number. Here is is the method signature=import cmath\r\ndef angle_complex(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 114, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 114, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. Here is is the method signature=def find_length(string, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 115, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of common divisors of two given numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 115, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of common divisors of two given numbers. Here is is the method signature=def sum(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 116, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to multiply two integers without using the * operator in python.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 116, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to multiply two integers without using the * operator in python. Here is is the method signature=def multiply_int(x, y):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 117, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to shortlist words that are longer than n from a given list of words.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 117, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to shortlist words that are longer than n from a given list of words. Here is is the method signature=def long_words(n, str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 118, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate magic square.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 118, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate magic square. Here is is the method signature=def magic_square_test(my_matrix):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 119, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the item with maximum frequency in a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 119, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the item with maximum frequency in a given list. Here is is the method signature=from collections import defaultdict\r\ndef max_occurrences(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 120, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to reverse only the vowels of a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 120, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to reverse only the vowels of a given string. Here is is the method signature=def reverse_vowels(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 121, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert tuple to a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 121, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert tuple to a string. Here is is the method signature=def tup_string(tup1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 122, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 122, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function. Here is is the method signature=def sum_negativenum(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 123, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 123, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the last element of given array is even or odd after performing an operation p times. Here is is the method signature=def check_last (arr,n,p):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 124, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the nth hexagonal number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 124, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the nth hexagonal number. Here is is the method signature=def hexagonal_num(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 125, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate electricity bill.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 125, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate electricity bill. Here is is the method signature=def cal_electbill(units):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 126, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the ration of zeroes in an array of integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 126, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the ration of zeroes in an array of integers. Here is is the method signature=from array import array\r\ndef zero_count(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 127, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 127, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. Here is is the method signature=def is_Sum_Of_Powers_Of_Two(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 128, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the circumference of a circle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 128, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the circumference of a circle. Here is is the method signature=def circle_circumference(r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 129, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract elements that occur singly in the given tuple list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 129, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract elements that occur singly in the given tuple list. Here is is the method signature=def extract_singly(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 130, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a list of elements using pancake sort.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 130, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a list of elements using pancake sort. Here is is the method signature=def pancake_sort(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 131, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count the same pair in three given lists.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 131, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count the same pair in three given lists. Here is is the method signature=def count_samepair(list1,list2,list3):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 132, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find number of lists present in the given tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 132, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find number of lists present in the given tuple. Here is is the method signature=def find_lists(Input):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 133, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 133, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of absolute differences in all pairs of the given array. Here is is the method signature=def sum_Pairs(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 134, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the maximum difference between any two elements in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 134, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the maximum difference between any two elements in a given array. Here is is the method signature=def max_Abs_Diff(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 135, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the ascii value of total characters in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 135, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the ascii value of total characters in a string. Here is is the method signature=def ascii_value_string(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 136, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum total path sum in the given triangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 136, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum total path sum in the given triangle. Here is is the method signature=def max_path_sum(tri, m, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 137, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 137, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to divide a number into two parts such that the sum of digits is maximum. Here is is the method signature=def sum_digits_single(x) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 138, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 138, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the longest subsequence such that the difference between adjacents is one for the given array. Here is is the method signature=def longest_subseq_with_diff_one(arr, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 139, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find whether the given number is present in the infinite sequence or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 139, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find whether the given number is present in the infinite sequence or not. Here is is the method signature=def does_Contain_B(a,b,c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 140, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given number is co-prime or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 140, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given number is co-prime or not. Here is is the method signature=def gcd(p,q):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 141, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort the given array by using merge sort.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 141, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort the given array by using merge sort. Here is is the method signature=def merge(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 142, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the vertex of a parabola.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 142, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the vertex of a parabola. Here is is the method signature=def parabola_vertex(a, b, c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 143, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract every specified element from a given two dimensional list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 143, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract every specified element from a given two dimensional list. Here is is the method signature=def specified_element(nums, N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 144, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to toggle all even bits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 144, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to toggle all even bits of a given number. Here is is the method signature=def even_bit_toggle_number(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 145, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert a tuple of string values to a tuple of integer values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 145, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert a tuple of string values to a tuple of integer values. Here is is the method signature=def tuple_int_str(tuple_str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 146, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to reflect the run-length encoding from a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 146, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to reflect the run-length encoding from a list. Here is is the method signature=from itertools import groupby\r\ndef encode_list(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 147, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find k number of operations required to make all elements equal.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 147, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find k number of operations required to make all elements equal. Here is is the method signature=def min_Ops(arr,n,k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 148, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to print the season for the given month and day.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 148, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to print the season for the given month and day. Here is is the method signature=def month_season(month,days):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 149, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find x and y that satisfies ax + by = n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 149, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find x and y that satisfies ax + by = n. Here is is the method signature=def solution (a, b, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 150, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove all elements from a given list present in another list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 150, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove all elements from a given list present in another list. Here is is the method signature=def remove_elements(list1, list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 151, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 151, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). Here is is the method signature=def sum_series(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 152, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the area of a regular polygon.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 152, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the area of a regular polygon. Here is is the method signature=from math import tan, pi\r\ndef area_polygon(s,l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 153, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the sum of divisors are same or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 153, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the sum of divisors are same or not. Here is is the method signature=import math \r\ndef divSum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 154, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 154, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet. Here is is the method signature=def count_char_position(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 155, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the pairs with xor as an even number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 155, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the pairs with xor as an even number. Here is is the method signature=def find_even_Pair(A,N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 156, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find smallest power of 2 greater than or equal to n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 156, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find smallest power of 2 greater than or equal to n. Here is is the method signature=def next_Power_Of_2(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 157, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the frequency of a number in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 157, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the frequency of a number in a given array. Here is is the method signature=def frequency(a,x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 158, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the nth pell number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 158, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the nth pell number. Here is is the method signature=def get_pell(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 159, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 159, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find sum of the numbers in a list between the indices of a specified range. Here is is the method signature=def sum_range_list(list1, m, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 160, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the perimeter of a pentagon.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 160, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the perimeter of a pentagon. Here is is the method signature=import math\r\ndef perimeter_pentagon(a):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 161, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 161, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item Here is is the method signature=def count_occurance(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 162, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove everything except alphanumeric characters from a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 162, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove everything except alphanumeric characters from a string. Here is is the method signature=import re\r\ndef remove_splchar(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 163, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 163, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to group a sequence of key-value pairs into a dictionary of lists. Here is is the method signature=def group_keyvalue(l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 164, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to verify validity of a string of parentheses.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 164, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to verify validity of a string of parentheses. Here is is the method signature=def is_valid_parenthese( str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 165, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the perimeter of a triangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 165, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the perimeter of a triangle. Here is is the method signature=def perimeter_triangle(a,b,c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 166, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 166, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find two distinct numbers such that their lcm lies within the given range. Here is is the method signature=def answer(L,R):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 167, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to search some literals strings in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 167, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to search some literals strings in a string. Here is is the method signature=import re\r\ndef string_literals(patterns,text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 168, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find if the given number is a keith number or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 168, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find if the given number is a keith number or not. Here is is the method signature=def is_num_keith(x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 169, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate distance between two points using latitude and longitude.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 169, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate distance between two points using latitude and longitude. Here is is the method signature=from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 170, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the longest common prefix in the given set of strings.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 170, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the longest common prefix in the given set of strings. Here is is the method signature=def common_prefix_util(str1, str2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 171, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 171, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find uppercase, lowercase, special character and numeric values using regex. Here is is the method signature=import re\r\ndef find_character(string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 172, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count all the distinct pairs having a difference of k in any array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 172, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count all the distinct pairs having a difference of k in any array. Here is is the method signature=def count_pairs(arr, n, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 173, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all the values in a list that are greater than a specified number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 173, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all the values in a list that are greater than a specified number. Here is is the method signature=def greater_specificnum(list,num):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 174, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the focus of a parabola.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 174, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the focus of a parabola. Here is is the method signature=def parabola_focus(a, b, c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 175, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to search some literals strings in a string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 175, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to search some literals strings in a string by using regex. Here is is the method signature=import re\r\ndef check_literals(text, patterns):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 176, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the longest common subsequence for the given two sequences.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 176, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the longest common subsequence for the given two sequences. Here is is the method signature=def longest_common_subsequence(X, Y, m, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 177, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given number can be represented by product of two squares or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 177, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given number can be represented by product of two squares or not. Here is is the method signature=def prod_Square(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 178, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first missing positive number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 178, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first missing positive number. Here is is the method signature=def first_Missing_Positive(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 179, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 179, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of integral co-ordinates that lie inside a square. Here is is the method signature=def count_Intgral_Points(x1,y1,x2,y2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 180, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether the given month name contains 30 days or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 180, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether the given month name contains 30 days or not. Here is is the method signature=def check_monthnumber(monthname3):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 181, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether a string has atleast one letter and one number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 181, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether a string has atleast one letter and one number. Here is is the method signature=def check_String(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 182, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove the duplicates from the given tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 182, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove the duplicates from the given tuple. Here is is the method signature=def remove_tuple(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 183, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to convert octal number to decimal number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 183, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to convert octal number to decimal number. Here is is the method signature=def octal_To_Decimal(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 184, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first position of an element in a sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 184, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first position of an element in a sorted array. Here is is the method signature=def first(arr,x,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 185, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove all the tuples with length k.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 185, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove all the tuples with length k. Here is is the method signature=def remove_tuples(test_list, K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 186, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform the exponentiation of the given two tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 186, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform the exponentiation of the given two tuples. Here is is the method signature=def find_exponentio(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 187, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 187, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the largest triangle that can be inscribed in an ellipse. Here is is the method signature=import math\r\ndef largest_triangle(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 188, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find highest power of 2 less than or equal to given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 188, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find highest power of 2 less than or equal to given number. Here is is the method signature=def highest_Power_of_2(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 189, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all index positions of the maximum values in a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 189, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all index positions of the maximum values in a given list. Here is is the method signature=def position_max(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 190, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the elements in a list are same or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 190, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the elements in a list are same or not. Here is is the method signature=def chkList(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 191, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove even characters in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 191, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove even characters in a string. Here is is the method signature=def remove_even(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 192, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the hamming distance between given two integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 192, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the hamming distance between given two integers. Here is is the method signature=def hamming_Distance(n1,n2) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 193, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the occurrence of a given character in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 193, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the occurrence of a given character in a string. Here is is the method signature=def count(s,c) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 194, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the inversions of tuple elements in the given tuple list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 194, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the inversions of tuple elements in the given tuple list. Here is is the method signature=def inversion_elements(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 195, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform the adjacent element concatenation in the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 195, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform the adjacent element concatenation in the given tuples. Here is is the method signature=def concatenate_elements(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 196, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 196, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions. Here is is the method signature=def find_longest_repeating_subseq(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 197, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check the given decimal with a precision of 2 by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 197, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check the given decimal with a precision of 2 by using regex. Here is is the method signature=import re\r\ndef is_decimal(num):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 198, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to delete the smallest element from the given heap and then insert a new item.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 198, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to delete the smallest element from the given heap and then insert a new item. Here is is the method signature=import heapq as hq\r\ndef heap_replace(heap,a):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 199, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 199, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex. Here is is the method signature=import re\r\ndef is_allowed_specific_char(string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 200, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count numbers whose oth and nth bits are set.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 200, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count numbers whose oth and nth bits are set. Here is is the method signature=def count_Num(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 201, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of fourth power of n natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 201, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of fourth power of n natural numbers. Here is is the method signature=import math  \r\ndef fourth_Power_Sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 202, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform the concatenation of two string tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 202, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform the concatenation of two string tuples. Here is is the method signature=def concatenate_strings(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 203, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert radians to degrees.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 203, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert radians to degrees. Here is is the method signature=import math\r\ndef degree_radian(radian):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 204, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to decode a run-length encoded given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 204, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to decode a run-length encoded given list. Here is is the method signature=def decode_list(alist):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 205, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if a nested list is a subset of another nested list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 205, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if a nested list is a subset of another nested list. Here is is the method signature=def check_subset_list(list1, list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 206, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first repeated character in a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 206, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first repeated character in a given string. Here is is the method signature=def first_Repeated_Char(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 207, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the minimum operations required to make two numbers equal.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 207, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the minimum operations required to make two numbers equal. Here is is the method signature=import math   \r\ndef min_Operations(A,B):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 208, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract maximum and minimum k elements in the given tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 208, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract maximum and minimum k elements in the given tuple. Here is is the method signature=\r\ndef extract_min_max(test_tup, K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 209, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 209, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon. Here is is the method signature=import re\r\ndef replace_max_specialchar(text,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 210, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first even number in a given list of numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 210, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first even number in a given list of numbers. Here is is the method signature=def first_even(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 211, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if all the elements in tuple have same data type or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 211, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if all the elements in tuple have same data type or not. Here is is the method signature=def check_type(test_tuple):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 212, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check for majority element in the given sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 212, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check for majority element in the given sorted array. Here is is the method signature=def is_majority(arr, n, x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 213, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count set bits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 213, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count set bits of a given number. Here is is the method signature=def count_Set_Bits(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 214, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the minimum element in a sorted and rotated array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 214, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the minimum element in a sorted and rotated array. Here is is the method signature=def find_Min(arr,low,high):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 215, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to remove the characters which have odd index values of a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 215, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to remove the characters which have odd index values of a given string. Here is is the method signature=def odd_values_string(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 216, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find minimum of three numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 216, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find minimum of three numbers. Here is is the method signature=def min_of_three(a,b,c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 217, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether all the bits are unset in the given range or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 217, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether all the bits are unset in the given range or not. Here is is the method signature=def all_Bits_Set_In_The_Given_Range(n,l,r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 218, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 218, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones. Here is is the method signature=def re_arrange_array(arr, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 219, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to replace blank spaces with any character in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 219, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to replace blank spaces with any character in a string. Here is is the method signature=def replace_blank(str1,char):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 220, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum sum in the given right triangle of numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 220, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum sum in the given right triangle of numbers. Here is is the method signature=def max_sum(tri, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 221, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to get the n largest items from a dataset.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 221, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to get the n largest items from a dataset. Here is is the method signature=import heapq\r\ndef larg_nnum(list1,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 222, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the lateral surface area of a cylinder.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 222, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the lateral surface area of a cylinder. Here is is the method signature=def lateralsuface_cylinder(r,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 223, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the volume of a cube.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 223, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the volume of a cube. Here is is the method signature=def volume_cube(l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 224, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to set all even bits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 224, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to set all even bits of a given number. Here is is the method signature=def even_bit_set_number(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 225, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 225, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle. Here is is the method signature=def No_of_Triangle(N,K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 226, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 226, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check the occurrences of records which occur similar times in the given tuples. Here is is the method signature=from collections import Counter \r\ndef check_occurences(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 227, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count number of non-empty substrings of a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 227, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count number of non-empty substrings of a given string. Here is is the method signature=def number_of_substrings(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 228, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 228, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m. Here is is the method signature=def get_total_number_of_sequences(m,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 229, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to replace the last element of the list with another list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 229, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to replace the last element of the list with another list. Here is is the method signature=def replace_list(list1,list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 230, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to generate a 3d array having each element as '*'.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 230, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to generate a 3d array having each element as '*'. Here is is the method signature=def array_3d(m,n,o):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 231, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count total characters in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 231, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count total characters in a string. Here is is the method signature=def count_charac(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 232, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort the given list based on the occurrence of first element of tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 232, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort the given list based on the occurrence of first element of tuples. Here is is the method signature=def sort_on_occurence(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 233, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the next perfect square greater than a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 233, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the next perfect square greater than a given number. Here is is the method signature=import math  \r\ndef next_Perfect_Square(N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 234, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 234, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum sum of bi-tonic sub-sequence for the given array. Here is is the method signature=def max_sum(arr, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 235, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function for computing square roots using the babylonian method.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 235, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function for computing square roots using the babylonian method. Here is is the method signature=def babylonian_squareroot(number):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 236, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the longest palindromic subsequence in the given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 236, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the longest palindromic subsequence in the given string. Here is is the method signature=def lps(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 237, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the harmonic sum of n-1.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 237, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the harmonic sum of n-1. Here is is the method signature=def harmonic_sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 238, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the intersection of two arrays using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 238, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the intersection of two arrays using lambda function. Here is is the method signature=def intersection_array(array_nums1,array_nums2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 239, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the occcurences of an element in a tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 239, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the occcurences of an element in a tuple. Here is is the method signature=def count_X(tup, x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 240, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to insert an element before each element of a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 240, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to insert an element before each element of a list. Here is is the method signature=def insert_element(list,element):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 241, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to convert complex numbers to polar coordinates.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 241, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to convert complex numbers to polar coordinates. Here is is the method signature=import cmath  \r\ndef convert(numbers):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 242, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count integers from a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 242, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count integers from a given list. Here is is the method signature=def count_integer(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 243, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all words starting with 'a' or 'e' in a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 243, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all words starting with 'a' or 'e' in a given string. Here is is the method signature=import re\r\ndef words_ae(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 244, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 244, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions. Here is is the method signature=from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 245, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of prime numbers less than a given non-negative number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 245, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of prime numbers less than a given non-negative number. Here is is the method signature=def count_Primes_nums(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 246, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to swap two numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 246, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to swap two numbers. Here is is the method signature=def swap_numbers(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 247, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find number of odd elements in the given list using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 247, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find number of odd elements in the given list using lambda function. Here is is the method signature=def count_odd(array_nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 248, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to maximize the given two tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 248, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to maximize the given two tuples. Here is is the method signature=def maximize_elements(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 249, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 249, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the nth newman\u2013shanks\u2013williams prime number. Here is is the method signature=def newman_prime(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 250, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform mathematical division operation across the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 250, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform mathematical division operation across the given tuples. Here is is the method signature=def division_elements(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 251, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 251, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to split a given list into two parts where the length of the first part of the list is given. Here is is the method signature=def split_two_parts(list1, L):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 252, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to merge two dictionaries.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 252, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to merge two dictionaries. Here is is the method signature=def merge_dict(d1,d2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 253, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate a dog's age in dog's years.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 253, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate a dog's age in dog's years. Here is is the method signature=def dog_age(h_age):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 254, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to split a list for every nth element.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 254, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to split a list for every nth element. Here is is the method signature=def list_split(S, step):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 255, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the lateral surface area of a cube.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 255, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the lateral surface area of a cube. Here is is the method signature=def lateralsurface_cube(l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 256, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of squares of first n odd natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 256, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of squares of first n odd natural numbers. Here is is the method signature=def square_Sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 257, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the n'th star number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 257, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the n'th star number. Here is is the method signature=def find_star_num(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 258, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the ascii value of a character.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 258, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the ascii value of a character. Here is is the method signature=def ascii_value(k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 259, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of even numbers at even positions.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 259, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of even numbers at even positions. Here is is the method signature=def sum_even_and_even_index(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 260, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of fifth power of first n even natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 260, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of fifth power of first n even natural numbers. Here is is the method signature=def even_Power_Sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 261, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perfom the rear element extraction from list of tuples records.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 261, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perfom the rear element extraction from list of tuples records. Here is is the method signature=def rear_extract(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 262, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 262, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to substract the contents of one tuple with corresponding index of other tuple. Here is is the method signature=def substract_elements(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 263, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find sum of even index binomial coefficients.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 263, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find sum of even index binomial coefficients. Here is is the method signature=import math  \r\ndef even_binomial_Coeff_Sum( n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 264, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the position of the last removed element from the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 264, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the position of the last removed element from the given array. Here is is the method signature=import math as mt \r\ndef get_Position(a,n,m):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 265, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the volume of a cylinder.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 265, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the volume of a cylinder. Here is is the method signature=def volume_cylinder(r,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 266, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to filter a dictionary based on values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 266, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to filter a dictionary based on values. Here is is the method signature=def dict_filter(dict,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 267, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the element count that occurs before the record in the given tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 267, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the element count that occurs before the record in the given tuple. Here is is the method signature=def count_first_elements(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 268, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the nth decagonal number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 268, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the nth decagonal number. Here is is the method signature=def is_num_decagonal(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 269, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to search an element in the given array by using sequential search.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 269, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to search an element in the given array by using sequential search. Here is is the method signature=def sequential_search(dlist, item):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 270, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check if the elements of a given list are unique or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 270, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check if the elements of a given list are unique or not. Here is is the method signature=def all_unique(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 271, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to substaract two lists using map and lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 271, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to substaract two lists using map and lambda function. Here is is the method signature=def sub_list(nums1,nums2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 272, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 272, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the frequency of each digit is less than or equal to the digit itself. Here is is the method signature=def validate(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 273, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether all items of a list are equal to a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 273, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether all items of a list are equal to a given string. Here is is the method signature=def check_element(list,element):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 274, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that matches a string that has an a followed by two to three 'b'.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 274, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that matches a string that has an a followed by two to three 'b'. Here is is the method signature=import re\r\ndef text_match_two_three(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 275, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 275, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times. Here is is the method signature=def max_sub_array_sum_repeated(a, n, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 276, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of squares of first n even natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 276, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of squares of first n even natural numbers. Here is is the method signature=def square_Sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 277, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 277, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count array elements having modular inverse under given prime number p equal to itself. Here is is the method signature=def modular_inverse(arr, N, P):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 278, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to calculate the number of odd days in a given year.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 278, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to calculate the number of odd days in a given year. Here is is the method signature=def odd_Days(N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 279, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the list of lists with maximum length.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 279, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the list of lists with maximum length. Here is is the method signature=def max_length(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 280, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 280, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. Here is is the method signature=def count_no_of_ways(n, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 281, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find quotient of two numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 281, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find quotient of two numbers. Here is is the method signature=def find(n,m):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 282, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the third side of a right angled triangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 282, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the third side of a right angled triangle. Here is is the method signature=import math\r\ndef otherside_rightangle(w,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 283, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum value in a given heterogeneous list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 283, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum value in a given heterogeneous list. Here is is the method signature=def max_val(listval):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 284, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to return the sum of all divisors of a number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 284, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to return the sum of all divisors of a number. Here is is the method signature=def sum_div(number):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 285, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count inversions in an array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 285, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count inversions in an array. Here is is the method signature=def get_Inv_Count(arr,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 286, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to flatten a given nested list structure.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 286, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to flatten a given nested list structure. Here is is the method signature=def flatten_list(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 287, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the nested list elements which are present in another list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 287, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the nested list elements which are present in another list. Here is is the method signature=def intersection_nested_lists(l1, l2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 288, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the maximum aggregate from the list of tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 288, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the maximum aggregate from the list of tuples. Here is is the method signature=from collections import defaultdict\r\ndef max_aggregate(stdata):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 289, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 289, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Here is is the method signature=def count_binary_seq(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 290, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the depth of a dictionary.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 290, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the depth of a dictionary. Here is is the method signature=def dict_depth(d):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 291, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the most significant bit number which is also a set bit.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 291, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the most significant bit number which is also a set bit. Here is is the method signature=def set_Bit_Number(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 292, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the count of inversion of two types are same or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 292, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the count of inversion of two types are same or not. Here is is the method signature=import sys \r\ndef solve(a,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 293, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find element at a given index after number of rotations.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 293, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find element at a given index after number of rotations. Here is is the method signature=def find_Element(arr,ranges,rotations,index) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 294, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to match two words from a list of words starting with letter 'p'.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 294, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to match two words from a list of words starting with letter 'p'. Here is is the method signature=import re\r\ndef start_withp(words):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 295, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 295, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i . Here is is the method signature=def max_sum_increasing_subseq(a, n, index, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 296, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to get a colon of a tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 296, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to get a colon of a tuple. Here is is the method signature=from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 297, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the specified number of largest products from two given lists.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 297, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the specified number of largest products from two given lists. Here is is the method signature=def large_product(nums1, nums2, N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 298, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the maximum of two numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 298, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the maximum of two numbers. Here is is the method signature=def maximum(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 299, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert a given string to a tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 299, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert a given string to a tuple. Here is is the method signature=def string_to_tuple(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 300, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to set the left most unset bit.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 300, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to set the left most unset bit. Here is is the method signature=def set_left_most_unset_bit(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 301, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the volume of a cone.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 301, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the volume of a cone. Here is is the method signature=import math\r\ndef volume_cone(r,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 302, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to print positive numbers in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 302, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to print positive numbers in a list. Here is is the method signature=def pos_nos(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 303, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 303, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n. Here is is the method signature=def max_sum_rectangular_grid(grid, n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 304, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first maximum length of even word.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 304, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first maximum length of even word. Here is is the method signature=def find_Max_Len_Even(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 305, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 305, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the index of the last occurrence of a given number in a sorted array. Here is is the method signature=def find_last_occurrence(A, x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 306, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to reflect the modified run-length encoding from a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 306, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to reflect the modified run-length encoding from a list. Here is is the method signature=from itertools import groupby\r\ndef modified_encode(alist):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 307, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 307, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the maximum volume of a cuboid with given sum of sides. Here is is the method signature=def max_volume (s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 308, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all five characters long word in the given string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 308, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all five characters long word in the given string by using regex. Here is is the method signature=import re\r\ndef find_long_word(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 309, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 309, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers. Here is is the method signature=def sum_difference(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 310, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the demlo number for the given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 310, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the demlo number for the given number. Here is is the method signature=def find_demlo(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 311, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all index positions of the minimum values in a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 311, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all index positions of the minimum values in a given list. Here is is the method signature=def position_min(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 312, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to re-arrange the given array in alternating positive and negative items.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 312, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to re-arrange the given array in alternating positive and negative items. Here is is the method signature=def right_rotate(arr, n, out_of_place, cur):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 313, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract the sum of alternate chains of tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 313, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract the sum of alternate chains of tuples. Here is is the method signature=def sum_of_alternates(test_tuple):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 314, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 314, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the minimum number of squares whose sum is equal to a given number. Here is is the method signature=def get_Min_Squares(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 315, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to get the word with most number of occurrences in the given strings list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 315, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to get the word with most number of occurrences in the given strings list. Here is is the method signature=from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 316, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to print check if the triangle is isosceles or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 316, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to print check if the triangle is isosceles or not. Here is is the method signature=def check_isosceles(x,y,z):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 317, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to rotate a given list by specified number of items to the left direction.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 317, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to rotate a given list by specified number of items to the left direction. Here is is the method signature=def rotate_left(list1,m,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 318, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count negative numbers in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 318, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count negative numbers in a list. Here is is the method signature=def neg_count(list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 319, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all three, four, five characters long words in the given string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 319, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all three, four, five characters long words in the given string by using regex. Here is is the method signature=import re\r\ndef find_char(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 320, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count unset bits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 320, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count unset bits of a given number. Here is is the method signature=def count_unset_bits(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 321, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count character frequency of a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 321, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count character frequency of a given string. Here is is the method signature=def char_frequency(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 322, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to sort a list according to the second element in sublist.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 322, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to sort a list according to the second element in sublist. Here is is the method signature=def Sort(sub_li):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 323, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the triangle is valid or not if sides are given.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 323, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the triangle is valid or not if sides are given. Here is is the method signature=def check_Validity(a,b,c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 324, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the sum of arithmetic progression.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 324, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the sum of arithmetic progression. Here is is the method signature=def ap_sum(a,n,d):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 325, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether the given month name contains 28 days or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 325, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether the given month name contains 28 days or not. Here is is the method signature=def check_monthnum(monthname1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 326, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that matches a word at the end of a string, with optional punctuation.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 326, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that matches a word at the end of a string, with optional punctuation. Here is is the method signature=import re\r\ndef text_match_word(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 327, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of substrings with same first and last characters.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 327, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of substrings with same first and last characters. Here is is the method signature=def check_Equality(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 328, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the maximum occuring divisor in an interval.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 328, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the maximum occuring divisor in an interval. Here is is the method signature=def find_Divisor(x,y):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 329, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 329, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of the three lowest positive numbers from a given list of numbers. Here is is the method signature=def sum_three_smallest_nums(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 330, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert the given set into ordered tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 330, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert the given set into ordered tuples. Here is is the method signature=def set_to_tuple(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 331, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 331, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the smallest range that includes at-least one element from each of the given arrays. Here is is the method signature=from heapq import heappop, heappush\r\nclass Node:", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 332, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the number of digits and letters in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 332, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the number of digits and letters in a string. Here is is the method signature=def dig_let(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 333, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find number of elements with odd factors in a given range.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 333, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find number of elements with odd factors in a given range. Here is is the method signature=def count_Odd_Squares(n,m):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 334, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the difference between two consecutive numbers in a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 334, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the difference between two consecutive numbers in a given list. Here is is the method signature=def diff_consecutivenums(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 335, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find entringer number e(n, k).", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 335, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find entringer number e(n, k). Here is is the method signature=def zigzag(n, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 336, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of squares in a rectangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 336, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of squares in a rectangle. Here is is the method signature=def count_Squares(m,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 337, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 337, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values. Here is is the method signature=def bin_coff(n, r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 338, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given string is a binary string or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 338, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given string is a binary string or not. Here is is the method signature=def check(string) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 339, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 339, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to minimize the length of the string by removing occurrence of only one character. Here is is the method signature=def minimum_Length(s) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 340, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first element occurring k times in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 340, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first element occurring k times in a given array. Here is is the method signature=def first_Element(arr,n,k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 341, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether all the characters in a given string are unique.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 341, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether all the characters in a given string are unique. Here is is the method signature=def unique_Characters(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 342, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove a specified column from a given nested list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 342, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove a specified column from a given nested list. Here is is the method signature=def remove_column(list1, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 343, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find t-nth term of arithemetic progression.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 343, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find t-nth term of arithemetic progression. Here is is the method signature=def tn_ap(a,n,d):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 344, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of rectangles in a circle of radius r.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 344, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of rectangles in a circle of radius r. Here is is the method signature=def count_Rectangles(radius):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 345, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the third angle of a triangle using two angles.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 345, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the third angle of a triangle using two angles. Here is is the method signature=def find_angle(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 346, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum element of all the given tuple records.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 346, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum element of all the given tuple records. Here is is the method signature=def find_max(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 347, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find modulo division of two lists using map and lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 347, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find modulo division of two lists using map and lambda function. Here is is the method signature=def moddiv_list(nums1,nums2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 348, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 348, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether one root of the quadratic equation is twice of the other or not. Here is is the method signature=def Check_Solution(a,b,c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 349, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the n\u2019th carol number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 349, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the n\u2019th carol number. Here is is the method signature=def get_carol(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 350, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove empty lists from a given list of lists.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 350, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove empty lists from a given list of lists. Here is is the method signature=def remove_empty(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 351, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the item with maximum occurrences in a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 351, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the item with maximum occurrences in a given list. Here is is the method signature=def max_occurrences(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 352, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to add the k elements to each element in the tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 352, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to add the k elements to each element in the tuple. Here is is the method signature=def add_K_element(test_list, K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 353, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 353, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the number of flips required to make the given binary string a sequence of alternate characters. Here is is the method signature=def make_flip(ch):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 354, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the number of digits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 354, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the number of digits of a given number. Here is is the method signature=def count_Digit(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 355, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 355, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the largest product of the pair of adjacent elements from a given list of integers. Here is is the method signature=def adjacent_num_product(list_nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 356, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if a binary tree is balanced or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 356, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if a binary tree is balanced or not. Here is is the method signature=class Node:", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 357, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to repeat the given tuple n times.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 357, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to repeat the given tuple n times. Here is is the method signature=def repeat_tuples(test_tup, N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 358, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the lateral surface area of cuboid", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 358, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the lateral surface area of cuboid Here is is the method signature=def lateralsurface_cuboid(l,w,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 359, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a tuple by its float element.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 359, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a tuple by its float element. Here is is the method signature=def float_sort(price):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 360, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the smallest missing element in a sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 360, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the smallest missing element in a sorted array. Here is is the method signature=def smallest_missing(A, left_element, right_element):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 361, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 361, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a given list of elements in ascending order using heap queue algorithm. Here is is the method signature=import heapq as hq\r\ndef heap_assending(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 362, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the volume of a cuboid.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 362, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the volume of a cuboid. Here is is the method signature=def volume_cuboid(l,w,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 363, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to print all permutations of a given string including duplicates.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 363, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to print all permutations of a given string including duplicates. Here is is the method signature=def permute_string(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 364, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to round the given number to the nearest multiple of a specific number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 364, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to round the given number to the nearest multiple of a specific number. Here is is the method signature=def round_num(n,m):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 365, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 365, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value. Here is is the method signature=def remove_replica(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 366, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to remove all occurrences of a character in a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 366, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to remove all occurrences of a character in a given string. Here is is the method signature=def remove_Char(s,c) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 367, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to shift last element to first position in the given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 367, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to shift last element to first position in the given list. Here is is the method signature=def move_first(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 368, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the surface area of a cuboid.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 368, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the surface area of a cuboid. Here is is the method signature=def surfacearea_cuboid(l,w,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 369, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to generate a two-dimensional array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 369, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to generate a two-dimensional array. Here is is the method signature=def multi_list(rownum,colnum):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 370, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a list of lists by a given index of the inner list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 370, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a list of lists by a given index of the inner list. Here is is the method signature=from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 371, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the number of rotations in a circularly sorted array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 371, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the number of rotations in a circularly sorted array. Here is is the method signature=def find_rotation_count(A):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 372, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to toggle all odd bits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 372, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to toggle all odd bits of a given number. Here is is the method signature=def even_bit_toggle_number(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 373, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the frequency of the smallest value in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 373, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the frequency of the smallest value in a given array. Here is is the method signature=def frequency_Of_Smallest(n,arr):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 374, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the n'th perrin number using recursion.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 374, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the n'th perrin number using recursion. Here is is the method signature=def get_perrin(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 375, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 375, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find out the minimum no of swaps required for bracket balancing in the given string. Here is is the method signature=def swap_count(s):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 376, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the hexadecimal number is even or odd.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 376, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the hexadecimal number is even or odd. Here is is the method signature=def even_or_odd(N):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 377, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the highest power of 2 that is less than or equal to n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 377, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the highest power of 2 that is less than or equal to n. Here is is the method signature=def highest_Power_of_2(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 378, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the n'th lucas number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 378, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the n'th lucas number. Here is is the method signature=def find_lucas(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 379, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to insert a given string at the beginning of all items in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 379, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to insert a given string at the beginning of all items in a list. Here is is the method signature=def add_string(list,string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 380, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert more than one list to nested dictionary.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 380, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert more than one list to nested dictionary. Here is is the method signature=def convert_list_dictionary(l1, l2, l3):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 381, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 381, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Here is is the method signature=def get_max_sum (n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 382, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the list with maximum length using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 382, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the list with maximum length using lambda function. Here is is the method signature=def max_length_list(input_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 383, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if given tuple is distinct or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 383, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if given tuple is distinct or not. Here is is the method signature=def check_distinct(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 384, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first non-repeated character in a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 384, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first non-repeated character in a given string. Here is is the method signature=def first_non_repeating_character(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 385, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 385, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether the given string starts and ends with the same character or not using regex. Here is is the method signature=import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 386, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the median of three specific numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 386, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the median of three specific numbers. Here is is the method signature=def median_numbers(a,b,c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 387, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to compute the sum of digits of each number of a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 387, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to compute the sum of digits of each number of a given list. Here is is the method signature=def sum_of_digits(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 388, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 388, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform the mathematical bitwise xor operation across the given tuples. Here is is the method signature=def bitwise_xor(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 389, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 389, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract the frequency of unique tuples in the given list order irrespective. Here is is the method signature=def extract_freq(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 390, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 390, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform index wise addition of tuple elements in the given two nested tuples. Here is is the method signature=def add_nested_tuples(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 391, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to compute the value of ncr%p.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 391, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to compute the value of ncr%p. Here is is the method signature=def ncr_modp(n, r, p):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 392, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if a url is valid or not using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 392, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if a url is valid or not using regex. Here is is the method signature=import re\r\ndef is_valid_URL(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 393, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the minimum of two numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 393, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the minimum of two numbers. Here is is the method signature=def minimum(a,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 394, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether an element exists within a tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 394, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether an element exists within a tuple. Here is is the method signature=def check_tuplex(tuplex,tuple1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 395, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the parity of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 395, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the parity of a given number. Here is is the method signature=def find_Parity(x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 396, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to create the next bigger number by rearranging the digits of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 396, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to create the next bigger number by rearranging the digits of a given number. Here is is the method signature=def rearrange_bigger(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 397, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 397, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find k number of pairs which consist of one element from the first array and one element from the second array. Here is is the method signature=import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 398, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the minimum product from the pairs of tuples within a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 398, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the minimum product from the pairs of tuples within a given list. Here is is the method signature=def min_product_tuple(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 399, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the minimum value in a given heterogeneous list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 399, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the minimum value in a given heterogeneous list. Here is is the method signature=def min_val(listval):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 400, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert the given snake case string to camel case string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 400, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert the given snake case string to camel case string by using regex. Here is is the method signature=import re\r\ndef snake_to_camel(word):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 401, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to remove odd numbers from a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 401, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to remove odd numbers from a given list. Here is is the method signature=def remove_odd(l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 402, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract the nth element from a given list of tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 402, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract the nth element from a given list of tuples. Here is is the method signature=def extract_nth_element(list1, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 403, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the value exists in a sequence or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 403, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the value exists in a sequence or not. Here is is the method signature=def overlapping(list1,list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 404, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find a pair with highest product from a given array of integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 404, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find a pair with highest product from a given array of integers. Here is is the method signature=def max_Product(arr):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 405, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 405, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number. Here is is the method signature=MAX = 1000000\r\ndef breakSum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 406, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find common first element in given list of tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 406, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find common first element in given list of tuple. Here is is the method signature=def group_tuples(Input):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 407, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sublist having maximum length.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 407, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sublist having maximum length. Here is is the method signature=def Find_Max(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 408, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 408, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Here is is the method signature=def round_and_sum(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 409, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the cube sum of first n even natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 409, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the cube sum of first n even natural numbers. Here is is the method signature=def cube_Sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 410, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to concatenate each element of tuple by the delimiter.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 410, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to concatenate each element of tuple by the delimiter. Here is is the method signature=def concatenate_tuple(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 411, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the average of cubes of first n natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 411, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the average of cubes of first n natural numbers. Here is is the method signature=def find_Average_Of_Cube(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 412, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to solve gold mine problem.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 412, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to solve gold mine problem. Here is is the method signature=def get_maxgold(gold, m, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 413, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract only the rear index element of each string in the given tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 413, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract only the rear index element of each string in the given tuple. Here is is the method signature=def extract_rear(test_tuple):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 414, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count the number of sublists containing a particular element.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 414, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count the number of sublists containing a particular element. Here is is the method signature=def count_element_in_list(list1, x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 415, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to filter odd numbers using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 415, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to filter odd numbers using lambda function. Here is is the method signature=def filter_oddnumbers(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 416, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 416, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex. Here is is the method signature=import re\r\ndef change_date_format(dt):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 417, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort the given array by using shell sort.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 417, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort the given array by using shell sort. Here is is the method signature=def shell_sort(my_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 418, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract the elementwise and tuples from the given two tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 418, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract the elementwise and tuples from the given two tuples. Here is is the method signature=def and_tuples(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 419, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the directrix of a parabola.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 419, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the directrix of a parabola. Here is is the method signature=def parabola_directrix(a, b, c):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 420, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that takes two lists and returns true if they have at least one common element.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 420, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that takes two lists and returns true if they have at least one common element. Here is is the method signature=def common_element(list1, list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 421, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the median of a trapezium.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 421, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the median of a trapezium. Here is is the method signature=def median_trapezium(base1,base2,height):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 422, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether the entered number is greater than the elements of the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 422, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether the entered number is greater than the elements of the given array. Here is is the method signature=def check_greater(arr, number):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 423, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that matches a string that has an a followed by one or more b's.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 423, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that matches a string that has an a followed by one or more b's. Here is is the method signature=import re\r\ndef text_match_one(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 424, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the last digit of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 424, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the last digit of a given number. Here is is the method signature=def last_Digit(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 425, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to print negative numbers in a list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 425, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to print negative numbers in a list. Here is is the method signature=def neg_nos(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 426, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove odd characters in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 426, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove odd characters in a string. Here is is the method signature=def remove_odd(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 427, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to count bidirectional tuple pairs.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 427, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to count bidirectional tuple pairs. Here is is the method signature=def count_bidirectional(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 428, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert a list of multiple integers into a single integer.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 428, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert a list of multiple integers into a single integer. Here is is the method signature=def multiple_to_single(L):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 429, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all adverbs and their positions in a given sentence.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 429, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all adverbs and their positions in a given sentence. Here is is the method signature=import re\r\ndef find_adverb_position(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 430, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the surface area of a cube.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 430, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the surface area of a cube. Here is is the method signature=def surfacearea_cube(l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 431, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the ration of positive numbers in an array of integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 431, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the ration of positive numbers in an array of integers. Here is is the method signature=from array import array\r\ndef positive_count(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 432, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the largest negative number from the given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 432, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the largest negative number from the given list. Here is is the method signature=def largest_neg(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 433, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to trim each tuple by k in the given tuple list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 433, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to trim each tuple by k in the given tuple list. Here is is the method signature=def trim_tuple(test_list, K):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 434, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 434, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to perform index wise multiplication of tuple elements in the given two tuples. Here is is the method signature=def index_multiplication(test_tup1, test_tup2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 435, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the occurence of all elements of list in a tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 435, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the occurence of all elements of list in a tuple. Here is is the method signature=from collections import Counter \r\ndef count_Occurrence(tup, lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 436, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find cubes of individual elements in a list using lambda function.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 436, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find cubes of individual elements in a list using lambda function. Here is is the method signature=def cube_nums(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 437, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the sum of perrin numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 437, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the sum of perrin numbers. Here is is the method signature=def cal_sum(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 438, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 438, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the triangle is valid or not if 3 points are given. Here is is the method signature=def check_Triangle(x1,y1,x2,y2,x3,y3):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 439, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract specified size of strings from a give list of string values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 439, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract specified size of strings from a give list of string values. Here is is the method signature=def extract_string(str, l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 440, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove all whitespaces from the given string using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 440, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove all whitespaces from the given string using regex. Here is is the method signature=import re\r\ndef remove_whitespaces(text1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 441, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that gives loss amount if the given amount has loss else return none.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 441, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that gives loss amount if the given amount has loss else return none. Here is is the method signature=def loss_amount(actual_cost,sale_amount):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 442, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of even factors of a number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 442, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of even factors of a number. Here is is the method signature=import math \r\ndef sumofFactors(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 443, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function that matches a word containing 'z'.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 443, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function that matches a word containing 'z'. Here is is the method signature=import re\r\ndef text_match_wordz(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 444, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check whether the given month number contains 31 days or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 444, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check whether the given month number contains 31 days or not. Here is is the method signature=def check_monthnumb_number(monthnum2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 445, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to reverse strings in a given list of string values.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 445, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to reverse strings in a given list of string values. Here is is the method signature=def reverse_string_list(stringlist):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 446, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sublist having minimum length.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 446, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sublist having minimum length. Here is is the method signature=def Find_Min(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 447, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the area of a rectangle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 447, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the area of a rectangle. Here is is the method signature=def rectangle_area(l,b):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 448, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove uppercase substrings from a given string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 448, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove uppercase substrings from a given string by using regex. Here is is the method signature=import re\r\ndef remove_uppercase(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 449, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to get the first element of each sublist.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 449, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to get the first element of each sublist. Here is is the method signature=def Extract(lst):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 450, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to count the upper case characters in a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 450, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to count the upper case characters in a given string. Here is is the method signature=def upper_ctr(str):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 451, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find all possible combinations of the elements of a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 451, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find all possible combinations of the elements of a given list. Here is is the method signature=def combinations_list(list1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 452, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum product subarray of the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 452, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum product subarray of the given array. Here is is the method signature=def max_subarray_product(arr):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 453, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if all values are same in a dictionary.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 453, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if all values are same in a dictionary. Here is is the method signature=def check_value(dict, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 454, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to drop empty items from a given dictionary.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 454, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to drop empty items from a given dictionary. Here is is the method signature=def drop_empty(dict1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 455, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the peak element in the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 455, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the peak element in the given array. Here is is the method signature=def find_peak_util(arr, low, high, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 456, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to convert decimal number to octal number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 456, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to convert decimal number to octal number. Here is is the method signature=def decimal_to_Octal(deciNum):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 457, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 457, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. Here is is the method signature=def max_product(arr, n ):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 458, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 458, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the maximum profit earned from a maximum of k stock transactions Here is is the method signature=def max_profit(price, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 459, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the pairwise addition of the elements of the given tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 459, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the pairwise addition of the elements of the given tuples. Here is is the method signature=def add_pairwise(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 460, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find remainder of array multiplication divided by n.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 460, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find remainder of array multiplication divided by n. Here is is the method signature=def find_remainder(arr, lens, n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 461, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to check whether the given list contains consecutive numbers or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 461, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to check whether the given list contains consecutive numbers or not. Here is is the method signature=def check_Consecutive(l):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 462, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 462, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Here is is the method signature=def tuple_intersection(test_list1, test_list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 463, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to replace characters in a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 463, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to replace characters in a string. Here is is the method signature=def replace_char(str1,ch,newch):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 464, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort counter by value.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 464, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort counter by value. Here is is the method signature=from collections import Counter\r\ndef sort_counter(dict1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 465, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the sum of the largest and smallest value in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 465, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the sum of the largest and smallest value in a given array. Here is is the method signature=def big_sum(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 466, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to convert the given string to lower case.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 466, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to convert the given string to lower case. Here is is the method signature=def is_lower(string):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 467, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove lowercase substrings from a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 467, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove lowercase substrings from a given string. Here is is the method signature=import re\r\ndef remove_lowercase(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 468, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first digit of a given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 468, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first digit of a given number. Here is is the method signature=def first_Digit(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 469, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the maximum occurring character in a given string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 469, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the maximum occurring character in a given string. Here is is the method signature=def get_max_occuring_char(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 470, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 470, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to determine if there is a subset of the given set with sum equal to the given sum. Here is is the method signature=def is_subset_sum(set, n, sum):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 471, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 471, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex. Here is is the method signature=import re \r\ndef match(text):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 472, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the first natural number whose factorial is divisible by x.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 472, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the first natural number whose factorial is divisible by x. Here is is the method signature=def first_Factorial_Divisible_Number(x):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 473, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove the matching tuples from the given two tuples.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 473, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove the matching tuples from the given two tuples. Here is is the method signature=def remove_matching_tuple(test_list1, test_list2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 474, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the largest palindromic number in the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 474, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the largest palindromic number in the given array. Here is is the method signature=def is_palindrome(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 475, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to compute binomial probability for the given number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 475, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to compute binomial probability for the given number. Here is is the method signature=def nCr(n, r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 476, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 476, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to sort a list of tuples in increasing order by the last element in each tuple. Here is is the method signature=def sort_tuple(tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 477, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the area of a pentagon.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 477, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the area of a pentagon. Here is is the method signature=import math\r\ndef area_pentagon(a):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 478, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the frequency of the largest value in a given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 478, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the frequency of the largest value in a given array. Here is is the method signature=def frequency_Of_Largest(n,arr):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 479, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 479, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to extract all the pairs which are symmetric in the given tuple list. Here is is the method signature=def extract_symmetric(test_list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 480, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the sum of geometric progression series.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 480, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the sum of geometric progression series. Here is is the method signature=import math\r\ndef sum_gp(a,n,r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 481, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to search an element in the given array by using binary search.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 481, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to search an element in the given array by using binary search. Here is is the method signature=def binary_search(item_list,item):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 482, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 482, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates. Here is is the method signature=import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 483, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to convert the given binary tuple to integer.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 483, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to convert the given binary tuple to integer. Here is is the method signature=def binary_to_integer(test_tup):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 484, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove lowercase substrings from a given string by using regex.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 484, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove lowercase substrings from a given string by using regex. Here is is the method signature=import re\r\ndef remove_lowercase(str1):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 485, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 485, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the smallest integers from a given list of numbers using heap queue algorithm. Here is is the method signature=import heapq as hq\r\ndef heap_queue_smallest(nums,n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 486, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the surface area of a cone.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 486, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the surface area of a cone. Here is is the method signature=import math\r\ndef surfacearea_cone(r,h):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 487, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find gcd of two positive integers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 487, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find gcd of two positive integers. Here is is the method signature=def gcd(x, y):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 488, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the diameter of a circle.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 488, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the diameter of a circle. Here is is the method signature=def diameter_circle(r):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 489, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to concatenate all elements of the given list into a string.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 489, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to concatenate all elements of the given list into a string. Here is is the method signature=def concatenate_elements(list):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 490, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find common divisor between two numbers in a given pair.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 490, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find common divisor between two numbers in a given pair. Here is is the method signature=def ngcd(x,y):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 491, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find remainder of two numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 491, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find remainder of two numbers. Here is is the method signature=def find(n,m):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 492, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to add consecutive numbers of a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 492, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to add consecutive numbers of a given list. Here is is the method signature=def add_consecutive_nums(nums):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 493, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the cube sum of first n natural numbers.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 493, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the cube sum of first n natural numbers. Here is is the method signature=def sum_Of_Series(n):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 494, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to move all zeroes to the end of the given array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 494, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to move all zeroes to the end of the given array. Here is is the method signature=def re_order(A):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 495, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to calculate the permutation coefficient of given p(n, k).", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 495, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to calculate the permutation coefficient of given p(n, k). Here is is the method signature=def permutation_coefficient(n, k):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 496, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to remove specific words from a given list.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 496, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to remove specific words from a given list. Here is is the method signature=def remove_words(list1, removewords):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 497, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to check if the common elements between two given lists are in the same order or not.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 497, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to check if the common elements between two given lists are in the same order or not. Here is is the method signature=def same_order(l1, l2):", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 498, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a python function to find the average of odd numbers till a given odd number.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 498, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a python function to find the average of odd numbers till a given odd number. Here is is the method signature=def average_Odd(n) :", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 499, "assigned_model": "model", "assigned_process": 0, "context_string": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "assigned_weight": 2, "filter_p": 1.0}
{"input_index": 499, "assigned_model": "model", "assigned_process": 0, "context_string": "Question=Write a function to find the number of subsequences having product smaller than k for the given non negative array. Here is is the method signature=def no_of_subsequences(arr, k):", "assigned_weight": 2, "filter_p": 1.0}
