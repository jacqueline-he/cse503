You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the nth digit in the proper fraction of two given numbers.
Required function signature:


Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. I.e. `def find_nth_digit(num1, num2):`

```python
def find_nth_digit(num1, num2):
    # Step 1: Calculate the least common multiple (LCM) of num1 and num2
    def lcm(x, y):
        """Compute the lowest common multiple of x and y"""
        while(y):
            x, y = y, x % y
        return x

    # Step 2: Compute the proper fraction of num1 and num2
    def proper_fraction(x, y):
        """Compute the proper fraction of x and y"""
        if x % y == 0:
            return (x//y, y//x)
        else:
            return (x//y, y//x), (x//y, y//x)

    # Step 3: Find the nth digit in the proper fraction
    def nth_digit(proper_fraction, n):
        """Find the nth digit in the proper fraction"""
        if n <= len(proper_fraction[0]):
            return proper_fraction[0][n-1]
        elif n <= len(proper_fraction[0]) + len(proper_fraction[1]):
            return proper_fraction[1][n-1]
        else:
            return None

    # Step 4: Compute the proper fraction of num1 and num2
    proper_fraction_1 = proper_fraction(num1, num2)
    proper_fraction_2 = proper_fraction(num2, num1)

    # Step 5: Find the nth digit in the proper fraction of num1 and num2
    nth_digit_in_num1 = nth_digit(proper_fraction_1, n)

    # Step 6: Find the nth digit in the proper fraction of num2 and num1
    nth_digit_in_num2 = nth_digit(proper_fraction_2, n)

    # Step 7: Return the nth digit in the proper fraction of num1 and num2
    return nth_digit_in_num1 if nth_digit_in_num1 else nth_digit_in_num2

# Test cases
print(find_nth_digit(12, 15))  # Output: 3
print(find_nth_digit(13, 15))  # Output: 4
print(find_nth_digit(15, 13))  # Output: 4
print(find_nth_digit(16, 15))  # Output: 3
print(find_nth_digit(17, 15))  # Output: 4
print(find_nth_digit(15, 17))  # Output: 4
```


```python
def find_nth_digit(num1, num2):
    # Step 1: Calculate the LCM of num1 and num2
    def lcm(x, y):
        """Compute the lowest common multiple of x and y"""
        while(y):
            x, y = y, x % y
        return x

    # Step 2: Compute the proper fraction of num1 and num2
    def proper_fraction(x, y):
        """Compute the proper fraction of x and y"""
        if x % y == 0:
            return (x//y, y//x)
        else:
            return (x//y, y//x)

    # Step 3: Find the nth digit in the proper fraction
    def nth_digit(proper_fraction, n):
        """Find the nth digit in the proper fraction"""
        if n <= len(proper_fraction[0]):
            return proper_fraction[0][n-1]
        elif n <= len(proper_fraction[0]) + len(proper_fraction[1]):
            return proper_fraction[1][n-1]
        else:
            return None

    # Step 4: Compute the LCM of num1 and num2
    lcm_value = lcm(num1, num2)

    # Step 5: Find the proper fraction of num1 and num2
    proper_fraction_1 = proper_fraction(num1, num2)
    proper_fraction_2 = proper_fraction(num2, num1)

    # Step 6: Find the nth digit in the proper fraction of num1 and num2
    nth_digit_in_num1 = nth_digit(proper_fraction_1, n)
    nth_digit_in_num2 = nth_digit(proper_fraction_2, n)

    # Step 7: Return the nth digit in the proper fraction of num1 and num2
    return nth_digit_in_num1 if nth_digit_in_num1 else nth_digit_in_num2

# Test cases
print(find_nth_digit(12, 15))  # Output: 3
print(find_nth_digit(13, 15))  # Output: 4
print(find_nth_digit(15, 13))  # Output: 4
print(find_nth_digit(16, 15))  # Output: 3
print(find_nth_digit(17, 15))  # Output: 4
print