You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the largest prime factor of a given number.
Required function signature:
def max_Prime_Factors(n):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Please ensure the function is well-documented and follows the required format.

```python
def max_Prime_Factors(n):
    def is_prime(x):
        if x < 2:
            return False
        for i in range(2, int(x**0.5) + 1):
            if x % i == 0:
                return False
        return True

    def prime_factors(x):
        factors = []
        for i in range(2, x + 1):
            while x % i == 0:
                factors.append(i)
                x //= i
        return factors

    max_factors = []
    for i in range(2, n + 1):
        if n % i == 0:
            factors = prime_factors(i)
            if not max_factors or len(factors) > len(max_factors):
                max_factors = factors
    return max_factors
```
```python
def max_Prime_Factors(n):
```
Step 1: Analyze the problem and identify the key steps or algorithms needed.
The task is to find the largest prime factor of a given number `n`. To achieve this, we need to:
- Identify all prime numbers less than or equal to `n`.
- Check which of these prime numbers are factors of `n`.
- Select the largest prime factor from the list of factors.

Step 2: Determine the required algorithms or functions.
We can use the following algorithms:
- Primality test to check if a number is prime.
- Prime factorization to find all prime numbers less than or equal to `n`.
- Filtering to select the largest prime factor.

Step 3: Consider any edge cases to ensure the solution is robust.
We should consider the following edge cases:
- `n` is less than 2, in which case there are no prime factors.
- `n` is a prime number, in which case the largest prime factor is `n` itself.

Step 4: Implement the complete solution inside triple backticks.

```python
def max_Prime_Factors(n):
    """
    Find the largest prime factor of a given number.

    Args:
        n (int): The input number.

    Returns:
        list: A list of prime factors of `n`.

    Raises:
        ValueError: If `n` is not an integer.
    """

    # Check if n is an integer
    if not isinstance(n, int):
        raise ValueError("Input must be an integer.")

    # Check if n is less than 2
    if n < 2:
        return []

    # Initialize a list to store prime factors
    factors = []

    # Primality test to check if a number is prime
    def is_prime(x):
        if x < 2:
            return False
        for i in range(2, int(x**0.5) + 1):
            if x % i == 0:
                return False
        return True

    # Find all prime numbers less than or equal to n
    for i in range(2, n + 1):
        if is_prime(i):
            # Check which of these prime numbers are factors of n
            factors = prime_factors(i)
            # Select the largest prime factor
            if not factors or len(factors) > len(max_factors):
                max_factors = factors

    return max_factors
````

```python
def max_Prime_Factors(n):
```
Step 1: Analyze the problem and identify the key steps or algorithms needed.
The task is to find the largest prime factor of a given number `n`. To achieve this, we need to:
- Identify all prime numbers less than or equal to `n`.
- Check which of these prime numbers are factors of `n`.
- Select the largest prime factor from the list of factors.

Step 2: Determine the required algorithms or functions.
We can use the following algorithms:
- Primality test to check if a number is prime.
- Prime factorization to find all prime numbers less than or equal to `n`.
- Filtering to select the largest prime factor.

Step 3: Consider any edge cases to ensure the solution is robust.
We should consider the following edge cases:
- `n` is less than 2, in which case there are no prime factors.
- `n` is a prime number, in which case the largest prime factor is `n` itself.

Step 4: Implement the complete solution inside triple backticks.

```python
def max_Prime_Factors(n):
    """
    Find the largest prime factor of a given number.

    Args:
        n (int): The input number.

    Returns:
        list: A list of prime factors of `n`.

    Raises:
        ValueError: If `n` is not an integer.
    """

    # Check if n is an integer
    if not isinstance(n, int):
        raise ValueError("Input must be an integer.")

    # Check if n is less than 2