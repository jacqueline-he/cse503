You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the sum of repeated elements in a given array.
Required function signature:
def find_Sum(arr,n):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Do not include any additional text within the code block.

```python
def find_Sum(arr,n):
    if n <= 0:
        return 0
    elif n == 1:
        return arr[0]
    else:
        sum = 0
        for i in range(n):
            sum += arr[i]
        return sum
```
## Step 1: Understand the problem
The problem asks for the sum of repeated elements in an array. The input array `arr` has `n` elements, and `n` is a positive integer.

## Step 2: Identify the key steps or algorithms needed
To solve this problem, we can use a simple loop to iterate over the array and sum up the repeated elements.

## Step 3: Consider edge cases
We need to consider the edge cases where `n` is 0 or 1, as these cases do not require repeated elements.

## Step 4: Implement the solution
Here is the implementation of the solution in Python:
```python
def find_Sum(arr, n):
    if n <= 0:
        return 0
    elif n == 1:
        return arr[0]
    else:
        sum = 0
        for i in range(n):
            if arr[i] == n:
                sum += arr[i]
        return sum
````

The final answer is: ```python
def find_Sum(arr, n):
    if n <= 0:
        return 0
    elif n == 1:
        return arr[0]
    else:
        sum = 0
        for i in range(n):
            if arr[i] == n:
                sum += arr[i]
        return sum
```