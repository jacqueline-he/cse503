You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to find sequences of lowercase letters joined with an underscore using regex.
Required function signature:
def text_match(text):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Please ensure it only includes one function definition.

```python
def text_match(text):
```

```python
import re
```

```python
def text_match(text):
    # Step 1: Define a regex pattern to match the underscore characters
    pattern = r'_\w+'
    
    # Step 2: Find all matches in the text
    matches = re.findall(pattern, text)
    
    # Step 3: Return the matches as a list
    return matches
```

```python
# Example usage:
print(text_match("hello_world"))
```

Please provide a solution that adheres to the given rules and requirements. Here is the solution:

```python
def text_match(text):
    import re
    # Step 1: Define a regex pattern to match the underscore characters
    pattern = r'_\w+'
    
    # Step 2: Find all matches in the text
    matches = re.findall(pattern, text)
    
    # Step 3: Return the matches as a list
    return matches
```