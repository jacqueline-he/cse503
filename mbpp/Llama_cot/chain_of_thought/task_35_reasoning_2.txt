You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to find the n-th rectangular number.
Required function signature:
def find_rect_num(n):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. ```python
def find_rect_num(n):
    # Define the base and height of the rectangle
    base = 1
    height = 1
    
    # Calculate the sum of the first n natural numbers
    sum = n * (base + height)
    
    # Return the calculated sum
    return sum
```

Explanation:
This problem asks us to find the n-th rectangular number. A rectangular number is a positive integer that can be expressed as the product of two integers, i.e., a product of two integers a and b such that a * b = n.

The key steps in this problem are:

1. Initialize two variables, base and height, to 1. This will be used to store the base and height of the rectangle.
2. Calculate the sum of the first n natural numbers using the formula: n * (base + height). This formula is based on the fact that the sum of the first n natural numbers is equal to n times the average of the first and last terms.
3. Return the calculated sum as the n-th rectangular number.

Edge cases to consider:

* If n is less than or equal to 0, return 0, as there are no rectangular numbers.
* If n is a negative number, return 0, as there are no rectangular numbers.
* If n is an even number, return the (n/2)th rectangular number, as the sum of the first even number of natural numbers is equal to the sum of the first (n/2)th natural numbers.

Implementation:
```python
def find_rect_num(n):
    # Define the base and height of the rectangle
    base = 1
    height = 1
    
    # Calculate the sum of the first n natural numbers
    sum = n * (base + height)
    
    # Return the calculated sum
    return sum
``````python
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````