You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the nth digit in the proper fraction of two given numbers.
Required function signature:


Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Please ensure the function name is descriptive and the function signature follows the required format.

```python
def find_nth_digit(numerator, denominator):
    # Handle edge cases
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    if numerator < denominator:
        raise ValueError("Numerator must be greater than denominator.")
    # Calculate the proper fraction
    gcd = math.gcd(numerator, denominator)
    numerator //= gcd
    denominator //= gcd
    # Find the nth digit
    if numerator == 0:
        return 0
    return numerator % 10
```

```python
import math

def find_nth_digit(numerator, denominator):
    """
    Find the nth digit in the proper fraction of two given numbers.

    Args:
        numerator (int): The numerator of the fraction.
        denominator (int): The denominator of the fraction.

    Returns:
        int: The nth digit in the proper fraction.

    Raises:
        ValueError: If the denominator is zero or the numerator is not greater than the denominator.
    """
    # Handle edge cases
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    if numerator < denominator:
        raise ValueError("Numerator must be greater than denominator.")

    # Calculate the proper fraction
    gcd = math.gcd(numerator, denominator)
    numerator //= gcd
    denominator //= gcd

    # Find the nth digit
    if numerator == 0:
        return 0
    return numerator % 10
```

```python
import math

def find_nth_digit(numerator, denominator):
    """
    Find the nth digit in the proper fraction of two given numbers.

    Args:
        numerator (int): The numerator of the fraction.
        denominator (int): The denominator of the fraction.

    Returns:
        int: The nth digit in the proper fraction.

    Raises:
        ValueError: If the denominator is zero or the numerator is not greater than the denominator.
    """
    # Handle edge cases
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    if numerator < denominator:
        raise ValueError("Numerator must be greater than denominator.")

    # Calculate the proper fraction
    gcd = math.gcd(numerator, denominator)
    numerator //= gcd
    denominator //= gcd

    # Find the nth digit
    if numerator == 0:
        return 0
    return numerator % 10
```

```python
def find_nth_digit(numerator, denominator):
    """
    Find the nth digit in the proper fraction of two given numbers.

    Args:
        numerator (int): The numerator of the fraction.
        denominator (int): The denominator of the fraction.

    Returns:
        int: The nth digit in the proper fraction.

    Raises:
        ValueError: If the denominator is zero or the numerator is not greater than the denominator.
    """
    # Handle edge cases
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    if numerator < denominator:
        raise ValueError("Numerator must be greater than denominator.")

    # Calculate the proper fraction
    gcd = math.gcd(numerator, denominator)
    numerator //= gcd
    denominator //= gcd

    # Find the nth digit
    if numerator == 0:
        return 0
    return numerator % 10
```

```python
def find_nth_digit(numerator, denominator):
    """
    Find the nth digit in the proper fraction of two given numbers.

    Args:
        numerator (int): The numerator of the fraction.
        denominator (int): The denominator of the fraction.

    Returns:
        int: The nth digit in the proper fraction.

    Raises:
        ValueError: If the denominator is zero or the numerator is not greater than the denominator.
    """
    # Handle edge cases
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    if numerator < denominator:
        raise ValueError("Numerator must be greater than denominator.")

    # Calculate the proper fraction
    gcd = math.gcd(numerator, denominator)
    numerator //= gcd
    denominator //= gcd

    # Find the nth digit
    if numerator == 0:
        return 0
    return numerator % 10
```

```python
def find_nth_digit(numerator, denominator):
    """
    Find the nth digit in the proper fraction of two given numbers.

    Args:
        numerator (int): The numerator of the fraction.
        denominator (int): The denominator of the fraction.

    Returns:
        int: The nth digit in the proper fraction.

    Raises:
        ValueError: If the denominator is zero or the numerator is not greater than the denominator.
    """
    # Handle edge cases
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    if numerator < denominator:
        raise ValueError("Numerator must be greater than denominator.")

    # Calculate the proper fraction
    gcd = math.g