You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to check if the given tuple list has all k elements.
Required function signature:
def check_k_elements(test_list, K):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Don't forget to include the required function signature.

```python
def check_k_elements(test_list, K):
    # Step 1: Check if K is a positive integer
    if not isinstance(K, int) or K <= 0:
        return False

    # Step 2: Check if all elements in test_list are integers
    if not all(isinstance(x, int) for x in test_list):
        return False

    # Step 3: Check if all elements in test_list are of the same type
    if len(set(type(x) for x in test_list))!= 1:
        return False

    # Step 4: Check if all elements in test_list are within the range of 0 to K
    for x in test_list:
        if not 0 <= x <= K:
            return False

    return True
```

```python
# Define a test list with 3 elements
test_list = [1, 2, 3, 4, 5]

# Define a value for K
K = 3

# Call the function and print the result
print(check_k_elements(test_list, K))  # Output: True
```