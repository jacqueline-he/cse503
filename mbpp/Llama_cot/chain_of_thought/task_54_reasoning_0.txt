You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to sort the given array by using counting sort.
Required function signature:
def counting_sort(my_list):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Please include the EXACT function signature.

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
```

```python
def counting_sort(my_list):
```
```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
```

```python
def counting_sort(my_list):
```

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
```

```python
def counting_sort(my_list):
```

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
````

```python
def counting_sort(my_list):
```

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
````

```python
def counting_sort(my_list):
```

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
````

```python
def counting_sort(my_list):
```

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val + 1):
            sorted_list.append([j, cnt[j]])
    return sorted_list
````

```python
def counting_sort(my_list):
```

```python
def counting_sort(my_list):
    if len(my_list) == 0:
        return my_list
    max_val = max(my_list)
    min_val = min(my_list)
    count = [0] * (max_val - min_val + 1)
    for num in my_list:
        count[num - min_val] += 1
    sorted_list = []
    for i, cnt in enumerate(count):
        for j in range(min_val, max_val