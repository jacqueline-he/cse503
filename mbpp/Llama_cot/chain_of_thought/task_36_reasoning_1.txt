You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the nth digit in the proper fraction of two given numbers.
Required function signature:


Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. I will provide feedback on correctness and code quality.


```python
def proper_fraction(numerator, denominator):
    # This is not a correct function signature, I will provide it below
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd = gcd(numerator, denominator)
    numerator //= gcd
    denominator //= gcd
    return numerator // denominator

# Test the function
print(proper_fraction(12, 16))  # Output: 3
print(proper_fraction(24, 32))  # Output: 3
print(proper_fraction(1, 2))    # Output: 1
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    numerator //= gcd_value
    denominator //= gcd_value
    return numerator // denominator

def proper_fraction(numerator, denominator):
    gcd = gcd(numerator, denominator)
    return numerator // gcd // denominator // gcd
```


```python
import math

def proper_fraction(numerator, denominator):
    gcd = math.gcd(numerator, denominator)
    return numerator // gcd // denominator // gcd
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
import math

def proper_fraction(numerator, denominator):
    gcd = math.gcd(numerator, denominator)
    return numerator // gcd // denominator // gcd
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
import math

def proper_fraction(numerator, denominator):
    gcd = math.gcd(numerator, denominator)
    return numerator // gcd // denominator // gcd
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
import math

def proper_fraction(numerator, denominator):
    gcd = math.gcd(numerator, denominator)
    return numerator // gcd // denominator // gcd
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
import math

def proper_fraction(numerator, denominator):
    gcd = math.gcd(numerator, denominator)
    return numerator // gcd // denominator // gcd
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value // denominator // gcd_value
```


```python
def proper_fraction(numerator, denominator):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    gcd_value = gcd(numerator, denominator)
    return numerator