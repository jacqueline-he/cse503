You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the largest number that can be formed with the given digits.
Required function signature:


Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. ```python
def largest_number(digits):
    digits = list(digits)
    digits.sort(reverse=True)
    return ''.join(digits)
```


**Step 1:** Define the problem and identify the key steps or algorithms needed.
The problem asks to find the largest number that can be formed with the given digits. We need to sort the digits in descending order and then join them to form a single string, which is the largest possible number.


**Step 2:** Identify any edge cases to consider.
There are no edge cases to consider in this problem, as we are only given a list of digits and need to form the largest possible number.


**Step 3:** Outline the key steps in the algorithm.
1. Read the input digits from the function parameter.
2. Sort the digits in descending order using the built-in sort function.
3. Join the sorted digits into a single string using the join function.


**Step 4:** Implement the solution using the outlined algorithm.
```python
def largest_number(digits):
    digits = list(digits)
    digits.sort(reverse=True)
    return ''.join(digits)
```


This function sorts the digits in descending order and then joins them into a single string, which is the largest possible number. The sorted function is used to sort the digits, and the join function is used to form the final string. The input digits are converted to a list to allow modification before sorting. The sorted list is then joined into a string using the join function, which concatenates the elements of the list into a single string. The result is the largest number that can be formed with the given digits.`

```python
def largest_number(digits):
    digits = list(digits)
    digits.sort(reverse=True)
    return ''.join(digits)

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return ''.join(sorted(digits, reverse=True))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return ''.join(sorted(digits, reverse=True, key=int))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(sorted(digits, reverse=True))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(map(str, sorted(digits, reverse=True)))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(map(str, sorted(digits, reverse=True)))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(map(str, sorted(digits, reverse=True)))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(sorted(digits, reverse=True, key=int))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(map(str, sorted(digits, reverse=True)))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return "".join(sorted(digits, reverse=True))

# Test the function
print(largest_number([3, 6, 9]))  # Output: "963"
print(largest_number([8, 3, 4]))  # Output: "943"
````

```python
def largest_number(digits):
    return