You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the last digit when factorial of a divides factorial of b.
Required function signature:
def compute_Last_Digit(A,B):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Don't forget to include EXACT function signature and the required input parameters.

```python
def compute_Last_Digit(A,B):
```

```python
    # Step 1: Calculate factorial of A
    A_factorial = 1
    for i in range(1, A + 1):
        A_factorial *= i

    # Step 2: Calculate factorial of B
    B_factorial = 1
    for i in range(1, B + 1):
        B_factorial *= i

    # Step 3: Find the remainder of A_factorial divided by B_factorial
    last_digit = A_factorial % B_factorial

    return last_digit
```

```python
def compute_Last_Digit(A,B):
```

```python
    # Step 1: Calculate factorial of A
    A_factorial = 1
    for i in range(1, A + 1):
        A_factorial *= i

    # Step 2: Calculate factorial of B
    B_factorial = 1
    for i in range(1, B + 1):
        B_factorial *= i

    # Step 3: Find the remainder of A_factorial divided by B_factorial
    # Since we're only interested in the last digit, we can use the modulo operator
    # to find the remainder. However, we need to consider the case where A is larger than B
    # in which case the remainder will be negative. To handle this, we can take the absolute value
    last_digit = abs(A_factorial) % abs(B_factorial)

    return last_digit
```

```python
def compute_Last_Digit(A,B):
```

```python
    # Step 1: Calculate factorial of A
    A_factorial = 1
    for i in range(1, A + 1):
        A_factorial *= i

    # Step 2: Calculate factorial of B
    B_factorial = 1
    for i in range(1, B + 1):
        B_factorial *= i

    # Step 3: Find the remainder of A_factorial divided by B_factorial
    # Since we're only interested in the last digit, we can use the modulo operator
    # to find the remainder. However, we need to consider the case where A is larger than B
    # in which case the remainder will be negative. To handle this, we can take the absolute value
    last_digit = abs(A_factorial) % abs(B_factorial)

    return last_digit
```

```python
def compute_Last_Digit(A,B):
```

```python
    # Step 1: Calculate factorial of A
    A_factorial = 1
    for i in range(1, A + 1):
        A_factorial *= i

    # Step 2: Calculate factorial of B
    B_factorial = 1
    for i in range(1, B + 1):
        B_factorial *= i

    # Step 3: Find the remainder of A_factorial divided by B_factorial
    # Since we're only interested in the last digit, we can use the modulo operator
    # to find the remainder. However, we need to consider the case where A is larger than B
    # in which case the remainder will be negative. To handle this, we can take the absolute value
    last_digit = abs(A_factorial) % abs(B_factorial)

    return last_digit
```

```python
def compute_Last_Digit(A,B):
```

```python
    # Step 1: Calculate factorial of A
    A_factorial = 1
    for i in range(1, A + 1):
        A_factorial *= i

    # Step 2: Calculate factorial of B
    B_factorial = 1
    for i in range(1, B + 1):
        B_factorial *= i

    # Step 3: Find the remainder of A_factorial divided by B_factorial
    # Since we're only interested in the last digit, we can use the modulo operator
    # to find the remainder. However, we need to consider the case where A is larger than B
    # in which case the remainder will be negative. To handle this, we can take the absolute value
    # of the remainder and then take the remainder of the absolute value divided by B_factorial
    last_digit = abs(A_factorial) % abs(B_factorial) % abs(B_factorial)

    return last_digit
```

```python
def compute_Last_Digit(A,B):
```

```python
    # Step 1: Calculate factorial of A
    A_factorial = 1
    for i in range(1, A + 1):
        A_factorial *= i

    # Step 