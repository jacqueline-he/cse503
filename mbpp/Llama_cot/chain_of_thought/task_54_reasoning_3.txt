You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to sort the given array by using counting sort.
Required function signature:
def counting_sort(my_list):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Please make sure the code is readable and well-formatted.

```python
def counting_sort(my_list):
    max_val = max(my_list)
    min_val = min(my_list)
    size = max_val - min_val + 1
    count = [0] * size
    output = [0] * len(my_list)
```
```python
# Step 1: Find the maximum and minimum values in the list
max_val = max(my_list)
min_val = min(my_list)
```
```python
# Step 2: Initialize the count array with zeros
count = [0] * size
```
```python
# Step 3: Count the occurrences of each number in the count array
for num in my_list:
    count[num - min_val] += 1
```
```python
# Step 4: Update the output array with the sorted numbers
for i in range(size - 1, -1, -1):
    output[count[i] - 1] = i
    count[i] -= 1
```
```python
# Step 5: Copy the sorted output to the original list
output = [x for x in output]
```
```python
# Step 6: Return the sorted list
return output
```
Let's implement this solution in Python:
```python
def counting_sort(my_list):
    """
    Sorts the given array by using counting sort.
    
    Args:
        my_list (list): The input list to be sorted.
    
    Returns:
        list: The sorted list.
    """
    # Step 1: Find the maximum and minimum values in the list
    max_val = max(my_list)
    min_val = min(my_list)

    # Step 2: Initialize the count array with zeros
    count = [0] * (max_val - min_val + 1)

    # Step 3: Count the occurrences of each number in the count array
    for num in my_list:
        count[num - min_val] += 1

    # Step 4: Update the output array with the sorted numbers
    for i in range(len(my_list) - 1, -1, -1):
        output[count[i] - 1] = my_list[i]
        count[i] -= 1

    # Step 5: Copy the sorted output to the original list
    output = my_list
    return output
```