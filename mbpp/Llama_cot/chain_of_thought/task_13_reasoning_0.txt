You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to count the most common words in a dictionary.
Required function signature:
def count_common(words):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. Please see below:

```python
import re
from collections import Counter
```

```python
def count_common(words):
    # Step 1: Remove punctuation and convert to lowercase
    words = [re.sub(r'[^\w\s]', '', word.lower()) for word in words]

    # Step 2: Tokenize the text into individual words
    tokens = [word for word in words if word.isalpha()]

    # Step 3: Count the occurrences of each word
    word_counts = Counter(tokens)

    # Step 4: Return the most common word(s)
    return word_counts.most_common(1)

# Example usage:
print(count_common(["I love Python", "Python is awesome", "Python is fun"]))
```
Step-by-step explanation:

1.  **Step 1: Remove punctuation and convert to lowercase**: This step is necessary to ensure that all words are treated equally and to ignore any non-alphanumeric characters that may be present in words.
2.  **Step 2: Tokenize the text into individual words**: This step involves splitting the text into individual words, which can be done by checking if each word is a letter (i.e., it is not a punctuation mark or a non-alphanumeric character).
3.  **Step 3: Count the occurrences of each word**: The `Counter` class from the `collections` module is used to count the occurrences of each word. The `isalpha()` method is used to check if a word is alphabetic.
4.  **Step 4: Return the most common word(s)**: The `most_common()` method of the `Counter` object is used to return the most common word(s).

### Implementation

```python
import re
from collections import Counter

def count_common(words):
    # Step 1: Remove punctuation and convert to lowercase
    words = [re.sub(r'[^\w\s]', '', word.lower()) for word in words]

    # Step 2: Tokenize the text into individual words
    tokens = [word for word in words if word.isalpha()]

    # Step 3: Count the occurrences of each word
    word_counts = Counter(tokens)

    # Step 4: Return the most common word(s)
    return word_counts.most_common(1)

# Example usage:
print(count_common(["I love Python", "Python is awesome", "Python is fun"]))
```