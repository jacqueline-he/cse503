You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to find the element occurring odd number of times.
Required function signature:
def get_Odd_Occurrence(arr,arr_size):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks.```python
def get_Odd_Occurrence(arr, arr_size):
    """
    This function finds the element occurring odd number of times in a given array.

    Parameters:
    arr (list): The input array.
    arr_size (int): The size of the array.

    Returns:
    int: The element occurring odd number of times in the array.
    """
    # Step 1: Initialize a dictionary to store the frequency of each element
    freq_dict = {}

    # Step 2: Iterate through the array and count the frequency of each element
    for num in arr:
        if num in freq_dict:
            freq_dict[num] += 1
        else:
            freq_dict[num] = 1

    # Step 3: Iterate through the frequency dictionary and find the element with odd frequency
    for key, value in freq_dict.items():
        if value % 2!= 0:
            return key

    # Step 4: If no element with odd frequency is found, return None
    return None
```

### Step-by-Step Explanation

1.  **Count the frequency of each element**: We initialize a dictionary called `freq_dict` to store the frequency of each element in the array.
2.  **Count the frequency of each element**: We iterate through the array and increment the count of each element in the dictionary.
3.  **Find the element with odd frequency**: We iterate through the frequency dictionary and check if the frequency of each element is odd (i.e., the remainder when divided by 2 is not equal to 0). If we find an element with an odd frequency, we return it.
4.  **Return None**: If no element with odd frequency is found, we return `None`.

### Step-by-Step Implementation

```python
def get_Odd_Occurrence(arr, arr_size):
    """
    This function finds the element occurring odd number of times in a given array.

    Parameters:
    arr (list): The input array.
    arr_size (int): The size of the array.

    Returns:
    int: The element occurring odd number of times in the array.
    """
    # Step 1: Initialize a dictionary to store the frequency of each element
    freq_dict = {}

    # Step 2: Iterate through the array and count the frequency of each element
    for num in arr:
        if num in freq_dict:
            freq_dict[num] += 1
        else:
            freq_dict[num] = 1

    # Step 3: Iterate through the frequency dictionary and find the element with odd frequency
    for key, value in freq_dict.items():
        if value % 2!= 0:
            return key

    # Step 4: If no element with odd frequency is found, return None
    return None
```

### Example Use Case

```python
# Define a sample array
arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]

# Call the function
result = get_Odd_Occurrence(arr, len(arr))

# Print the result
print(result)  # Output: 4
```