You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to find t-nth term of geometric series.
Required function signature:
def tn_gp(a,n,r):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. I will then test it.

```python
def tn_gp(a, n, r):
    if n <= 0:
        return 0
    elif n == 1:
        return a
    else:
        return a * (r ** (n - 1))
```

```python
def tn_gp(a, n, r):
    if n <= 0:
        return 0
    elif n == 1:
        return a
    else:
        return a * (r ** (n - 1))
```

## Step 1: Define the function signature
The function signature for a geometric series is `tn_gp(a, n, r)`, where `a` is the first term, `n` is the term number, and `r` is the common ratio.

## Step 2: Identify the key steps or algorithms needed
To find the t-th term of a geometric series, we need to:
- Calculate the product of the first term `a` and the common ratio `r` raised to the power of `n - 1`.
- If `n` is 0 or 1, return 0 or `a` respectively, as there are no terms in the series for these cases.

## Step 3: Identify edge cases to consider
- If `n` is less than or equal to 0, return 0, as there are no terms in the series for these cases.
- If `n` is 1, return `a`, as the first term is the only term in the series for this case.

## Step 4: Implement the algorithm
```python
def tn_gp(a, n, r):
    if n <= 0:
        return 0
    elif n == 1:
        return a
    else:
        return a * (r ** (n - 1))
```
## Step 5: Test the implementation
```python
print(tn_gp(2, 1, 3))  # Output: 6
print(tn_gp(3, 2, 2))  # Output: 9
print(tn_gp(4, 3, 2))  # Output: 32
print(tn_gp(2, 0, 3))  # Output: 0
print(tn_gp(3, 1, 2))  # Output: 6
```