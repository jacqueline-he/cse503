You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to check whether the first and last characters of a given string are equal or not.
Required function signature:
def check_Equality(str):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. ```python
def check_Equality(str):
    # Step 1: Check if the string is empty or has only one character
    if len(str) < 2:
        return False

    # Step 2: Check if the first and last characters are equal
    first_char = str[0]
    last_char = str[-1]
    return first_char == last_char
```
5. The function should handle all possible edge cases, such as strings containing only digits, alphabets, or special characters.
6. The function should also handle strings with leading or trailing whitespace.

Example use cases:
- "Hello" -> True
- "Hello World" -> False
- "   Hello   " -> True
- "Hello World! " -> False
- "abc" -> True
- "abcdef" -> False
- "abc   def" -> False
- "abc def   " -> True
- "abc def   " -> False
- "abc def abc" -> False
- "abc def abc def" -> False
- "abc def abc def abc" -> True
- "abc def abc def abc def" -> True
- "abc def abc def abc def abc" -> False
- "abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
- "abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def abc def" -> False
