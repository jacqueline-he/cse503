You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
Required function signature:
def rearange_string(S):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. DO NOT include any comments.

```python
def rearange_string(S):
```

```python
# Step 1: Initialize variables to track the frequency of each character
char_freq = {}
```

```python
# Step 2: Count the frequency of each character in the string
for char in S:
    if char in char_freq:
        char_freq[char] += 1
    else:
        char_freq[char] = 1
```

```python
# Step 3: Calculate the number of pairs of adjacent characters that are different
#   and return True if the string can be rearranged
def rearange_string(S):
    char_freq = {}
    pairs_diff = 0
    for char in S:
        if char in char_freq:
            char_freq[char] += 1
        else:
            char_freq[char] = 1
        if char_freq[char] > 1 and char_freq.get(char + 1, 0) > 0:
            pairs_diff += 1
    return pairs_diff <= 1
```

```python
# Step 4: Return the result
return pairs_diff <= 1
```

```python
# Example usage:
print(rearange_string("aab"))  # True
print(rearange_string("aba"))  # False
```assistant

```python
def rearange_string(S):
    # Step 1: Initialize variables to track the frequency of each character
    char_freq = {}
    # Step 2: Count the frequency of each character in the string
    for char in S:
        if char in char_freq:
            char_freq[char] += 1
        else:
            char_freq[char] = 1
    # Step 3: Calculate the number of pairs of adjacent characters that are different
    #   and return True if the string can be rearranged
    def get_pairs_diff(string):
        pairs_diff = 0
        for i in range(len(string) - 1):
            if string[i] in char_freq and string[i + 1] in char_freq and char_freq[string[i]] > 0 and char_freq[string[i + 1]] > 0:
                pairs_diff += 1
        return pairs_diff
    # Step 4: Return the result
    return get_pairs_diff(S) <= 1
```

```python
# Example usage:
print(rearange_string("aab"))  # True
print(rearange_string("aba"))  # False
```