You are a Python code generator who reasons step-by-step.
First, analyze the problem carefully to ensure you understand the requirements.
Second, clearly explain your approach using mathematical reasoning and algorithmic thinking.
Third, outline the key steps in your algorithm before writing any code.
Finally, implement EXACTLY ONE SOLUTION in a SINGLE code block marked with triple backticks.

IMPORTANT RULES:
1. NEVER include multiple code blocks - only provide ONE final solution inside triple backticks.
2. ALWAYS use the EXACT function signature provided in the prompt.
3. DO NOT use input() functions - read all data from function parameters.
4. Ensure your solution correctly handles all test cases and edge cases.
5. After reasoning, provide ONLY the implementation without any additional text within the code block.

User request:
Task:
Write a python function to remove first and last occurrence of a given character from the string.
Required function signature:
def remove_Occ(s,ch):

Think step-by-step:
1. What is this problem asking for?
2. What are the key steps or algorithms needed?
3. Are there any edge cases to consider?
4. Implement your complete solution inside triple backticks. 
```python
def remove_Occ(s,ch):
    return ''.join([c for i,c in enumerate(s) if c!= ch])
```
```python
def remove_Occ(s,ch):
```
```python
def remove_Occ(s,ch):
```
```python
def remove_Occ(s,ch):
```
```python
def remove_Occ(s,ch):
```
```python
import re
def remove_Occ(s,ch):
```
```python
def remove_Occ(s,ch):
```
```python
def remove_Occ(s,ch):
```
```python
import re
def remove_Occ(s,ch):
```
```python
def remove_Occ(s,ch):
```
### Step 1: Understand the problem
This problem is asking to remove the first and last occurrence of a given character from a string.

### Step 2: Identify key steps or algorithms
To remove the first and last occurrence of a character, we can use the following algorithm:
- Find the first occurrence of the character using `re.search()`.
- Remove the first occurrence using slicing (`s[s.find(ch) + 1:s.find(ch) + 2]`).
- Find the last occurrence of the character using `re.search()` again.
- Remove the last occurrence using slicing (`s[s.rfind(ch) + 1:s.rfind(ch) + 2]`).

### Step 3: Identify edge cases
We need to consider the case where the character is not found in the string. In this case, we should return the original string.

### Step 4: Implement the solution
```python
import re

def remove_Occ(s, ch):
    if ch not in s:
        return s
    first_occurrence = re.search(ch + '\w*', s).start()
    last_occurrence = re.search(ch + '\w*', s).end()
    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]
```